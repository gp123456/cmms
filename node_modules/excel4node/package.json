{
  "_args": [
    [
      {
        "raw": "excel4node",
        "scope": null,
        "escapedName": "excel4node",
        "name": "excel4node",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\gpat\\cmms"
    ]
  ],
  "_from": "excel4node@latest",
  "_id": "excel4node@1.2.1",
  "_inCache": true,
  "_location": "/excel4node",
  "_nodeVersion": "4.2.6",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/excel4node-1.2.1.tgz_1473445385100_0.6166862866375595"
  },
  "_npmUser": {
    "name": "amekkawi",
    "email": "npm@andremekkawi.com"
  },
  "_npmVersion": "2.14.12",
  "_phantomChildren": {},
  "_requested": {
    "raw": "excel4node",
    "scope": null,
    "escapedName": "excel4node",
    "name": "excel4node",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/excel4node/-/excel4node-1.2.1.tgz",
  "_shasum": "94ee13a004e9af2191d2cf0fae76d3dbf5ff3e5e",
  "_shrinkwrap": null,
  "_spec": "excel4node",
  "_where": "C:\\gpat\\cmms",
  "author": {
    "name": "Nater",
    "email": "nater@seas.harvard.edu"
  },
  "bugs": {
    "url": "https://github.com/natergj/excel4node/labels/bug"
  },
  "dependencies": {
    "babel-register": "^6.9.0",
    "colors": "^1.1.2",
    "image-size": "0.5.0",
    "jszip": "^3.0.0",
    "lodash": "4.13.1",
    "mime": "^1.3.4",
    "sloth-logger": "^1.0.3",
    "xmlbuilder": "8.2.2"
  },
  "description": "Library to create Formatted Excel Files.",
  "devDependencies": {
    "babel-cli": "^6.10.1",
    "babel-polyfill": "^6.9.1",
    "babel-preset-es2015": "^6.9.0",
    "babel-preset-es2015-node4": "^2.1.0",
    "jsdoc-babel": "^0.2.1",
    "source-map-support": "^0.4.1",
    "tape": "^4.6.0",
    "tape-promise": "^1.1.0",
    "xmldom": "^0.1.22",
    "xpath.js": "^1.0.6"
  },
  "directories": {},
  "dist": {
    "shasum": "94ee13a004e9af2191d2cf0fae76d3dbf5ff3e5e",
    "tarball": "https://registry.npmjs.org/excel4node/-/excel4node-1.2.1.tgz"
  },
  "engines": {
    "node": ">4.0.0"
  },
  "gitHead": "03e65713f036a6e47775f2e56a9bf99219a7e27a",
  "homepage": "https://github.com/natergj/excel4node#readme",
  "keywords": [
    "excel",
    "spreadsheet",
    "xlsx",
    "formatted",
    "styled",
    "report",
    "workbook",
    "ooxml"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "http://opensource.org/licenses/mit-license.php"
    }
  ],
  "main": "./distribution/index.js",
  "maintainers": [
    {
      "name": "amekkawi",
      "email": "npm@andremekkawi.com"
    },
    {
      "name": "natergj",
      "email": "nater@iamnater.com"
    }
  ],
  "name": "excel4node",
  "optionalDependencies": {},
  "readme": "# excel4node\nA full featured xlsx file generation library allowing for the creation of advanced Excel files.\n\nexcel4node conforms to the ECMA-376 OOXML specification 2nd edition   \n\nREFERENCES   \n[OpenXML White Paper](http://www.ecma-international.org/news/TC45_current_work/OpenXML%20White%20Paper.pdf)   \n[ECMA-376 Website](http://www.ecma-international.org/publications/standards/Ecma-376.htm)   \n[OpenOffice Excel File Format Reference](http://www.openoffice.org/sc/excelfileformat.pdf)   \n[OpenOffice Anatomy of OOXML explanation](http://officeopenxml.com/anatomyofOOXML-xlsx.php)   \n[MS-XSLX spec (pdf)] (http://download.microsoft.com/download/D/3/3/D334A189-E51B-47FF-B0E8-C0479AFB0E3C/%5BMS-XLSX%5D.pdf)    \n\nCode references specifications sections from ECMA-376 2nd edition doc   \nECMA-376, Second Edition, Part 1 - Fundamentals And Markup Language Reference.pdf   \nfound in ECMA-376 2nd edition Part 1 download at [http://www.ecma-international.org/publications/standards/Ecma-376.htm](http://www.ecma-international.org/publications/standards/Ecma-376.htm)   \n\n### Basic Usage\n```javascript\n// Require library\nvar xl = require('excel4node');\n\n// Create a new instance of a Workbook class\nvar wb = new xl.Workbook();\n\n// Add Worksheets to the workbook\nvar ws = wb.addWorksheet('Sheet 1');\nvar ws2 = wb.addWorksheet('Sheet 2');\n\n// Create a reusable style\nvar style = wb.createStyle({\n\tfont: {\n\t\tcolor: '#FF0800',\n\t\tsize: 12\n\t},\n\tnumberFormat: '$#,##0.00; ($#,##0.00); -'\n});\n\n// Set value of cell A1 to 100 as a number type styled with paramaters of style\nws.cell(1,1).number(100).style(style);\n\n// Set value of cell B1 to 300 as a number type styled with paramaters of style\nws.cell(1,2).number(200).style(style);\n\n// Set value of cell C1 to a formula styled with paramaters of style\nws.cell(1,3).formula('A1 + B1').style(style);\n\n// Set value of cell A2 to 'string' styled with paramaters of style\nws.cell(2,1).string('string').style(style);\n\n// Set value of cell A3 to true as a boolean type styled with paramaters of style but with an adjustment to the font size.\nws.cell(3,1).bool(true).style(style).style({font: {size: 14}});\n\nwb.write('Excel.xlsx');\n```\n## excelnode\nexcel4node comes with some generic functions and types\n\nxl.getExcelRowCol(cellRef)   \nAccepts cell reference (i.e. 'A1') and returns object with corresponding row and column\n\n```javascript \nxl.getExcelRowCol('B5');\n// returns { row: 5, col: 2} \n```\n\nxl.getExcelAlpha(column)   \nAccepts column as integer and returns corresponding column reference as alpha\n\n```javascript \nxl.getExcelAlpha(10);\n// returns 'J'\n```\n\nxl.getExcelCellRef(row, column)   \nAccepts row and column as integers and returns Excel cell reference\n\n```javascript \nxl.getExcelCellRef(5, 3);\n// returns 'C5'\n```\n\nxl.getExcelTS(date)   \nAccepts Date object and returns an Excel timestamp\n\n```javascript \nvar newDate = new Date('2015-01-01T00:00:00.0000Z');\nxl.getExcelTS(newDate);\n// Returns 42004.791666666664\n```\n\nxl.PAPER_SIZE\n\n\n## Workbook\nAn instance of the Workbook class contains all data and parameters for the Excel Workbook.\n\n#### Constructor\nWorkBook constructor accepts a configuration object.\n\n```javascript\nvar xl = require('excel4node');\nvar wb = new xl.Workbook({\n    jszip: {\n        compression: 'DEFLATE'\n    },\n    defaultFont: {\n        size: 12,\n        name: 'Calibri',\n        color: 'FFFFFFFF'\n    },\n    dateFormat: 'm/d/yy hh:mm:ss'\n});\n```\n\n#### Methods   \nwb.addWorksheet(name, options);   \nAdds a new WorkSheet to the WorkBook   \nAccepts name of new WorkSheet and options object (see WorkSheet section)   \nReturns a WorkSheet instance\n\nwb.setSelectedTab(id);   \nSets which tab will be selected when the WorkBook is opened   \nAccepts Sheet ID (1-indexed sheet in order that sheets were added)\n\nwb.createStyle(opts);  \nCreates a new Style instance   \nAccepts Style configuration object (see Style section)\nReturns a new Style instance   \n\nwb.write();   \nThe write() method can accept a single filename, a filename with callback function or an HTTP response object.\n\n```javascript\nvar xl = require('excel4node');\nvar wb = new xl.Workbook();\nwb.write('ExcelFile.xlsx'); // Writes the file ExcelFile.xlsx to the process.cwd();\n```\n```javascript\nwb.write('ExcelFile.xlsx', function (err, stats) {\n\tif (err) {\n\t\tconsole.error(err);\n\t} \n\tconsole.log(stats); // Prints out an instance of a node.js fs.Stats object\n});\n```\n```javascript\n// sends Excel file to web client requesting the / route\nvar express = require('express');\nvar app = express();\napp.get('/', function (req, res) {\n    wb.write('ExcelFile.xlsx', res);\n});\napp.listen(3000, function () {\n  console.log('Example app listening on port 3000!');\n});\n```\n\nwb.writeToBuffer();   \nThe writeToBuffer() method access no parameters and returns a promise that resolves with the nodebuffer generated by the JSZip library. This buffer can then be sent to other streams.\n\n```javascript\nvar xl = require('excel4node');\nvar wb = new xl.Workbook();\n\nwb.writeToBuffer().then(function (buffer) {\n\t// Do something with buffer\n});\n```\n\n\n## Worksheet\nAn instance of the Worksheet class contains all information specific to that worksheet\n\n#### Contstructor\nWorksheet contructor is called via Workbook class and accepts a name and configuration object\n\n```javascript\nvar xl = require('excel4node');\nvar wb = new xl.Workbook();\n\nvar options = {\n\tmargins: {\n\t\tleft: 1.5,\n\t\tright: 1.5\n\t}\n};\n\nvar ws = wb.addWorksheet(options);\n```\n\nFull Worksheet options. All options are optional.\n\n```\n{\n    'margins': { // Accepts a Double in Inches\n        'bottom': Double,\n        'footer': Double,\n        'header': Double,\n        'left': Double,\n        'right': Double,\n        'top': Double\n    },\n    'printOptions': {\n        'centerHorizontal': Boolean,\n        'centerVertical': Boolean,\n        'printGridLines': Boolean,\n        'printHeadings': Boolean\n    \n    },\n    'headerFooter': { // Set Header and Footer strings and options. See note below\n        'evenFooter': String,\n        'evenHeader': String,\n        'firstFooter': String,\n        'firstHeader': String,\n        'oddFooter': String,\n        'oddHeader': String,\n        'alignWithMargins': Boolean,\n        'differentFirst': Boolean,\n        'differentOddEven': Boolean,\n        'scaleWithDoc': Boolean\n    },\n    'pageSetup': {\n        'blackAndWhite': Boolean,\n        'cellComments': xl.CellComment, // one of 'none', 'asDisplayed', 'atEnd'\n        'copies': Integer,\n        'draft': Boolean,\n        'errors': xl.PrintError, // One of 'displayed', 'blank', 'dash', 'NA'\n        'firstPageNumber': Integer,\n        'fitToHeight': Integer, // Number of vertical pages to fit to\n        'fitToWidth': Integer, // Number of horizontal pages to fit to\n        'horizontalDpi': Integer,\n        'orientation': xl.Orientation, // One of 'default', 'portrait', 'landscape'\n        'pageOrder': xl.PageOrder, // One of 'downThenOver', 'overThenDown'\n        'paperHeight': xl.PositiveUniversalMeasure, // Value must a positive Float immediately followed by unit of measure from list mm, cm, in, pt, pc, pi. i.e. '10.5cm'\n        'paperSize': xl.PaperSize, // see lib/types/paperSize.js for all types and descriptions of types. setting paperSize overrides paperHeight and paperWidth settings\n        'paperWidth': xl.PositiveUniversalMeasure,\n        'scale': Integer,\n        'useFirstPageNumber': Boolean,\n        'usePrinterDefaults': Boolean,\n        'verticalDpi': Integer\n    },\n    'sheetView': {\n        'pane': { // Note. Calling .freeze() on a row or column will adjust these values \n            'activePane': xl.Pane, // one of 'bottomLeft', 'bottomRight', 'topLeft', 'topRight'\n            'state': xl.PaneState, // one of 'split', 'frozen', 'frozenSplit'\n            'topLeftCell': Cell Reference, // i.e. 'A1'\n            'xSplit': Float, // Horizontal position of the split, in 1/20th of a point; 0 (zero) if none. If the pane is frozen, this value indicates the number of columns visible in the top pane.\n            'ySplit': Float // Vertical position of the split, in 1/20th of a point; 0 (zero) if none. If the pane is frozen, this value indicates the number of rows visible in the left pane.\n        },\n        'rightToLeft': Boolean, // Flag indicating whether the sheet is in 'right to left' display mode. When in this mode, Column A is on the far right, Column B ;is one column left of Column A, and so on. Also, information in cells is displayed in the Right to Left format.\n        'zoomScale': Integer, // Defaults to 100\n        'zoomScaleNormal': Integer, // Defaults to 100\n        'zoomScalePageLayoutView': Integer // Defaults to 100\n    },\n    'sheetFormat': {\n        'baseColWidth': Integer, // Defaults to 10. Specifies the number of characters of the maximum digit width of the normal style's font. This value does not include margin padding or extra padding for gridlines. It is only the number of characters.,\n        'defaultColWidth': Integer,\n        'defaultRowHeight': Integer,\n        'thickBottom': Boolean, // 'True' if rows have a thick bottom border by default.\n        'thickTop': Boolean // 'True' if rows have a thick top border by default.\n    },\n    'sheetProtection': { // same as \"Protect Sheet\" in Review tab of Excel \n        'autoFilter': Boolean, // True means that that user will be unable to modify this setting\n        'deleteColumns': Boolean,\n        'deleteRows': Boolean,\n        'formatCells': Boolean,\n        'formatColumns': Boolean,\n        'formatRows': Boolean,\n        'insertColumns': Boolean,\n        'insertHyperlinks': Boolean,\n        'insertRows': Boolean,\n        'objects': Boolean,\n        'password': String,\n        'pivotTables': Boolean,\n        'scenarios': Boolean,\n        'selectLockedCells': Boolean,\n        'selectUnlockedCells': Boolean,\n        'sheet': Boolean,\n        'sort': Boolean\n    },\n    'outline': {\n        'summaryBelow': Boolean, // Flag indicating whether summary rows appear below detail in an outline, when applying an outline/grouping.\n        'summaryRight': Boolean // Flag indicating whether summary columns appear to the right of detail in an outline, when applying an outline/grouping.\n    }\n}\n```\n\n__Note:__ headerFooter strings accept [Dynamic Formatting Strings](https://poi.apache.org/apidocs/org/apache/poi/xssf/usermodel/extensions/XSSFHeaderFooter.html). i.e. '&L&A&C&BCompany, Inc. Confidential&B&RPage &P of &N'   \n\n\n#### Methods\n##### Worksheet data validations   \nws.addDataValidation();   \nAccepts a validation options object with these available options. All options are optional with exception of sqref.\n\n```javascript\n{\n\tsqref: String, // Required. Specifies range of cells to apply validate. i.e. \"A1:A100\"\n\tallowBlank: Boolean, // Allows cells to be empty\n\terrorStyle: String, // One of 'stop', 'warning', 'information'. You must specify an error string for this to take effect\n\terror: String, // Message to show on error\n\terrorTitle: String, // Title of message shown on error\n\tshowErrorMessage: Boolean, // Defaults to true if error or errorTitle is set\n\timeMode: String, // Restricts input to a specific set of characters. One of 'noControl', 'off', 'on', 'disabled', 'hiragana', 'fullKatakana', 'halfKatakana', 'fullAlpha', 'halfAlpha', 'fullHangul', 'halfHangul'\n\toperator: String, // Must be one of 'between', 'notBetween', 'equal', 'notEqual', 'lessThan', 'lessThanOrEqual', 'greaterThan', 'greaterThanOrEqual'\n\tprompt: String, // Message text of input prompt\n\tpromptTitle: String, // Title of input prompt\n\tshowInputMessage: Boolean, // Defaults to true if prompt or promptTitle is set\n\tshowDropDown: Boolean, // A boolean value indicating whether to display a dropdown combo box for a list type data validation. Defaults to true for type:list\n\ttype: String, // One of 'none', 'whole', 'decimal', 'list', 'date', 'time', 'textLength', 'custom'\n\tformulas: Array // Minimum count 1, maximum count 2. \n}\n```\n\n\n```javascript\nws.addDataValidation({\n    type: 'list',\n    allowBlank: true,\n    prompt: 'Choose from dropdown',\n    error: 'Invalid choice was chosen',\n    showDropDown: true,\n    sqref: 'X2:X10',\n    formulas: [\n        'value1,value2'\n    ]\n});\n\nws.addDataValidation({\n    type: 'list',\n    allowBlank: 1,\n    sqref: 'B2:B10',\n    formulas: [\n        '=sheet2!$A$1:$A$2'\n    ]\n});\n\nws.addDataValidation({\n    type: 'whole',\n    operator: 'between',\n    allowBlank: 1,\n    sqref: 'A1:A10',\n    formulas: [0, 100]\n});\n```\n\n##### Worksheet Conditional Formatting\nConditional formatting adds custom formats in response to cell reference state. A subset of conditional formatting features is currently supported by excel4node.   \nFormatting rules apply at the worksheet level.   \nThe following example will highlight all cells between A1 and A10 that contain the string \"ok\" with bold, green text:   \n\n```javascript\nvar wb = new xl.Workbook();\nvar ws = wb.addWorksheet('Sheet 1');\nvar myStyle = wb.createStyle({\n\tfont: {\n\t\tbold: true,\n\t\tcolor: '00FF00'\n\t}\n});\n \nws.addConditionalFormattingRule('A1:A10', {      // apply ws formatting ref 'A1:A10' \n    type: 'expression',                          // the conditional formatting type \n    priority: 1,                                 // rule priority order (required) \n    formula: 'NOT(ISERROR(SEARCH(\"ok\", A1)))',   // formula that returns nonzero or 0 \n    style: myStyle                               // a style object containing styles to apply \n});\n```\n**The only conditional formatting type that is currently supported is expression.**   \nWhen the formula returns zero, conditional formatting is NOT displayed. When the formula returns a nonzero value, conditional formatting is displayed.\n\n\n## Rows and Columns\n\nSet custom widths and heights of columns/rows\n\n```javascript\nws.column(3).setWidth(50);\nws.row(1).setHeight(20);\n```\n\nSet rows and/or columns to create a frozen pane with an optionall scrollTo\n\n```javascript\nws.column(2).freeze(4); // Freezes the first two columns and scrolls the right view to column D\nws.row(4).freeze(); // Freezes the top four rows\n\n```\n\nAdd Filters to a row\nIf not options are given to the filter function, a filter will be added to all columns that contain data. \nOptionally, if you wish to restrict your filter to a specific range, you can specify start and end rows and columns for that range. The filter row should be included in this range.\n\n```javascript\nws.row(1).filter();\nws2.row(1).filter({\n\tfirstRow: 1,\n\tfirstColumn: 1,\n\tlastRow: 20,\n\tlastColumn: 5\n})\n```\n\nHide a row or column\n\n```javascript \nws.row(5).hide();\nws.column(10).hide();\n```\n\nCreate groupings of rows or columns and optionally state to collapse the grouping\n\n```javascript\nws.row(2).group(1, true);\nws.row(3).group(1, true);\nws.row(5).group(1);\nws.row(6).group(1);\n\nws.column(4).group(1, true);\nws.column(5).group(1, true);\n```\n\n\n## Cells\nThe cell method accesses a single cell or range of cells to manipulate   \ncell method takes two required parameters and 3 optional parameters   \n.string() accepts a String or Array. Sending array allows for multiple font formattings within the same cell.   \n.number(number) accepts a number   \n.formula(formula) accepts an Excel formula   \n.date(date) accepts either a date or a date string   \n.link(url, [displayStr, tooltip]) accepts a URL and optionally a displayStr and hover tooltip   \n.bool(value) accepts a boolean (true or false)   \n.style(object) accepts the same object as when creating a new style.  When applied to a cell that already has style formatting, the original formatting will be kept and updated with the changes sent to the style function.   \n\n```javascript\n// ws.cell(startRow, startColumn, [[endRow, endColumn], isMerged]); \n\nws.cell(1, 1).string('My simple string');\nws.cell(1, 2).number(5);\nws.cell(1, 3).formula('B1 * 10');\nws.cell(1, 4).date(new Date());\nws.cell(1, 5).link('http://iamnater.com');\nws.cell(1, 6).bool(true);\n\nws.cell(2, 1, 2, 6, true).string('One big merged cell');\nws.cell(3, 1, 3, 6).number(1); // All 6 cells set to number 1\n\nvar complexString = [\n    'Workbook default font String\\n',\n    {\n        bold: true,\n        underline: true,\n        italic: true,\n        color: 'FF0000',\n        size: 18,\n        name: 'Courier',\n        value: 'Hello'\n    },\n    ' World!',\n    {\n        color: '000000',\n        underline: false,\n        name: 'Arial',\n        vertAlign: 'subscript'\n    },\n    ' All',\n    ' these',\n    ' strings',\n    ' are',\n    ' black subsript,',\n    {\n        color: '0000FF',\n        value: '\\nbut',\n        vertAlign: 'baseline'\n    },\n    ' now are blue'\n];\nws.cell(4, 1).string(complexString);\nws.cell(5, 1).string('another simple string').style({ font: {name: 'Helvetica'} });\n\n```\n\n## Styles\nStyle objects can be applied to Cells   \nAny combination of style values can be set   \nCreating a preset style is much more efficient than applying styles to individual cells   \n\n```javascript\n/*\nStyle Options Object:\n{\n    alignment: { // §18.8.1\n        horizontal: ['center', 'centerContinuous', 'distributed', 'fill', 'general', 'justify', 'left', 'right'],\n        indent: integer, // Number of spaces to indent = indent value * 3\n        justifyLastLine: boolean,\n        readingOrder: ['contextDependent', 'leftToRight', 'rightToLeft'], \n        relativeIndent: integer, // number of additional spaces to indent\n        shrinkToFit: boolean,\n        textRotation: integer, // number of degrees to rotate text counter-clockwise\n        vertical: ['bottom', 'center', 'distributed', 'justify', 'top'],\n        wrapText: boolean\n    },\n    font: { // §18.8.22\n        bold: boolean,\n        charset: integer,\n        color: string,\n        condense: boolean,\n        extend: boolean,\n        family: string,\n        italics: boolean,\n        name: string,\n        outline: boolean,\n        scheme: string, // §18.18.33 ST_FontScheme (Font scheme Styles)\n        shadow: boolean,\n        strike: boolean,\n        size: integer,\n        underline: boolean,\n        vertAlign: string // §22.9.2.17 ST_VerticalAlignRun (Vertical Positioning Location)\n    },\n    border: { // §18.8.4 border (Border)\n        left: {\n            style: string, //§18.18.3 ST_BorderStyle (Border Line Styles) ['none', 'thin', 'medium', 'dashed', 'dotted', 'thick', 'double', 'hair', 'mediumDashed', 'dashDot', 'mediumDashDot', 'dashDotDot', 'mediumDashDotDot', 'slantDashDot']\n            color: string // HTML style hex value\n        },\n        right: {\n            style: string,\n            color: string\n        },\n        top: {\n            style: string,\n            color: string\n        },\n        bottom: {\n            style: string,\n            color: string\n        },\n        diagonal: {\n            style: string,\n            color: string\n        },\n        diagonalDown: boolean,\n        diagonalUp: boolean,\n        outline: boolean\n    },\n    fill: { // §18.8.20 fill (Fill)\n        type: string, // Currently only 'pattern' is implimented. Non-implimented option is 'gradient'\n        patternType: string, //§18.18.55 ST_PatternType (Pattern Type)\n        bgColor: string // HTML style hex value. optional. defaults to black\n        fgColor: string // HTML style hex value. required.\n    },\n    numberFormat: integer or string // §18.8.30 numFmt (Number Format)\n});\n*/\n\nvar wb = new xl.Workbook();\nvar ws = wb.addWorksheet('Sheet 1');\nvar myStyle = wb.createStyle({\n\tfont: {\n\t\tbold: true,\n\t\tunderline: true\n\t}, \n\talignment: {\n\t\twrapText: true,\n\t\thorizontal: 'center'\n\t}\n});\n\nws.cell(1, 1).string('my \\n multiline\\n string').style(myStyle);\nws.cell(2, 1).string('row 2 string');\nws.cell(3, 1).string('row 3 string');\nws.cell(2, 1, 3, 1).style(myStyle);\nws.cell(3, 1).style({ font: { underline: false } });\nws.cell(4, 1).date(new Date()).style({ numberFormat: 'yyyy-mm-dd' });\n// Since dates are stored as numbers in Excel, use the numberFormat option of the styles to set the date format as well.\n```\n\n## Images\nAdds and image to the worksheet.   \ncurrently on 'picture' type is supported   \npositioning has 3 types, 'absoluteAnchor', 'oneCellAnchor', 'twoCellAnchor'   \nabsoluteAnchor takes two position elements in either EMUs or measurements in cm, mm, or in   \nx:0, y:0 is top left corner of worksheet  \noneCellAnchor and twoCellAnchor types will take positional objects: \n\n```javascript\n{  \n\t'col': 1, \\\\ left side of image will be placed on left edge of this column   \n\t'colOff': '.5mm', \\\\ offset from left edge of column as EMU or measurment in cm, mm or in   \n\t'row': 1, \\\\top of image will be place on the top edge of this row   \n\t'rowOff': '.1in' or string \\\\ offset from top edge or row as EMU or measurement in cm, mm or in   \n}\n```\nposition type of oneCellAnchor will take a single \"from\" position   \nposition type of twoCellAnchor will take a \"from\" and \"to\" position   \nspecifying a twoCellAnchor will automatically adjust the image to fit within the bounds of the two anchors.   \n\n```javascript\n\nws.addImage({\n    path: './screenshot2.jpeg',\n    type: 'picture',\n    position: {\n        type: 'absoluteAnchor',\n        x: '1in',\n        y: '2in'\n    }\n});\n\nws.addImage({\n    path: './screenshot1.jpg',\n    type: 'picture',\n    position: {\n        type: 'oneCellAnchor',\n        from: {\n            col: 1,\n            colOff: '0.5in',\n            row: 1,\n            rowOff: 0 \n        }\n    }\n});\n \nws.addImage({\n    path: './screenshot1.png',\n    type: 'picture',\n    position: {\n        type: 'twoCellAnchor',\n        from: {\n            col: 1,\n            colOff: 0,\n            row: 10,\n            rowOff: 0\n        },\n        to: {\n            col: 4,\n            colOff: 0,\n            row: 13,\n            rowOff: 0\n        }\n    }\n});\n\n```",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/natergj/excel4node.git"
  },
  "scripts": {
    "build": "./node_modules/babel-cli/bin/babel.js source --presets babel-preset-es2015 -s --out-dir distribution",
    "document": "jsdoc ./source -r -d docs",
    "prepublish": "npm run build; npm run test",
    "test": "NODE_ENV=test ./node_modules/tape/bin/tape -r babel-register ./tests/*.test.js",
    "watch": "./node_modules/babel-cli/bin/babel.js source -w --presets babel-preset-es2015 -s --out-dir distribution"
  },
  "version": "1.2.1"
}
