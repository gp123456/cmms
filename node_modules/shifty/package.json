{
  "_args": [
    [
      {
        "raw": "shifty@^1.5.2",
        "scope": null,
        "escapedName": "shifty",
        "name": "shifty",
        "rawSpec": "^1.5.2",
        "spec": ">=1.5.2 <2.0.0",
        "type": "range"
      },
      "C:\\gpat\\cmms\\node_modules\\progressbar.js"
    ]
  ],
  "_from": "shifty@>=1.5.2 <2.0.0",
  "_id": "shifty@1.5.4",
  "_inCache": true,
  "_location": "/shifty",
  "_nodeVersion": "7.1.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/shifty-1.5.4.tgz_1480469173028_0.8333367947489023"
  },
  "_npmUser": {
    "name": "jeremyckahn",
    "email": "jeremyckahn@gmail.com"
  },
  "_npmVersion": "4.0.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "shifty@^1.5.2",
    "scope": null,
    "escapedName": "shifty",
    "name": "shifty",
    "rawSpec": "^1.5.2",
    "spec": ">=1.5.2 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/progressbar.js"
  ],
  "_resolved": "https://registry.npmjs.org/shifty/-/shifty-1.5.4.tgz",
  "_shasum": "d4362fc914dd280ddf6e522be408b21203208346",
  "_shrinkwrap": null,
  "_spec": "shifty@^1.5.2",
  "_where": "C:\\gpat\\cmms\\node_modules\\progressbar.js",
  "author": {
    "name": "Jeremy Kahn",
    "email": "jeremyckahn@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/jeremyckahn/shifty/issues"
  },
  "contributors": [
    {
      "name": "Miller Medeiros",
      "email": "contact@millermedeiros.com"
    },
    {
      "name": "Carl Olsen",
      "email": "carl@emoxie.com"
    },
    {
      "name": "Joe Lambert"
    },
    {
      "name": "Roman Kofman",
      "email": "romank@groupon.com"
    },
    {
      "name": "Jonathan Raoult",
      "email": "jesuisjonathan@gmx.fr"
    },
    {
      "name": "Adrian Voica",
      "email": "adrian.voica@nanokyte.com"
    }
  ],
  "dependencies": {},
  "description": "A teeny tiny tweening engine in JavaScript.",
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-bump": "0.0.13",
    "grunt-contrib-concat": "~0.1.3",
    "grunt-contrib-copy": "^0.7.0",
    "grunt-contrib-jshint": "^0.11.1",
    "grunt-contrib-qunit": "1.2.0",
    "grunt-contrib-uglify": "^0.9.2",
    "grunt-contrib-yuidoc": "^0.5.2",
    "grunt-dox": "~0.5.0"
  },
  "directories": {},
  "dist": {
    "shasum": "d4362fc914dd280ddf6e522be408b21203208346",
    "tarball": "https://registry.npmjs.org/shifty/-/shifty-1.5.4.tgz"
  },
  "gitHead": "3ec5e8f21abdd614c5c82a05d1be3f2038e2a91e",
  "homepage": "http://jeremyckahn.github.io/shifty",
  "license": "MIT",
  "main": "dist/shifty.js",
  "maintainers": [
    {
      "name": "jeremyckahn",
      "email": "jeremyckahn@gmail.com"
    }
  ],
  "name": "shifty",
  "optionalDependencies": {},
  "readme": "# Shifty - A teeny tiny tweening engine in JavaScript\n\nShifty is a tweening engine for JavaScript.  It is a lightweight library meant\nto be encapsulated by higher level tools.  At its core, Shifty provides:\n\n  * Interpolation of `Number`s over time (tweening)\n  * Playback control of an individual tween\n  * Extensibility hooks for key points in the tweening process\n\nThis is useful because it is the least amount of functionality needed to build\ncustomizable animations. Shifty is optimized to run many times a second with\nminimal processing and memory overhead, which is necessary to achieve smooth\nanimations.  The core Shifty library doesn't do:\n\n  * Rendering (such as CSS or Canvas)\n  * Sequencing\n  * Much else\n\nBut don't worry!  If you need functionality like this, you can easily extend\nthe core with whatever you need.  In fact, there are some extensions included\nin the standard distribution (the `dist/` directory) that make Shifty more\nuseful for common animation needs.  Extensions included in the default build\nare:\n\n* [`shifty.token.js`](http://jeremyckahn.github.io/shifty/dist/doc/src/shifty.token.js.html):\n  String support.  Allows you to interpolate numbers within\n  arbitrarily-formatted strings such as \"25px\" or \"rgb(255, 0, 255)\".  In other\n  words, this extension allows Shifty to tween CSS properties.\n* [`shifty.interpolate.js`](http://jeremyckahn.github.io/shifty/dist/doc/src/shifty.interpolate.js.html):\n  Compute the midpoint between a set of values outside of a tween.  In other\n  words, compute a single frame of an animation.\n* [`shifty.bezier.js`](http://jeremyckahn.github.io/shifty/dist/doc/src/shifty.bezier.js.html):\n  Define custom easing curves based on a [cubic Bezier\n  curve](http://en.wikipedia.org/wiki/B%C3%A9zier_curve#Cubic_B.C3.A9zier_curves).\n  Take a look at [cubic-bezier.com](http://cubic-bezier.com/) for a visual aid.\n* [`shifty.formulas.js`](src/shifty.formulas.js): A bunch of [Robert\n  Penner](http://robertpenner.com/) easing formulas adapted from\n  [Scripty2](https://github.com/madrobby/scripty2).\n\n## Installation\n\nShifty is available through NPM and Bower:\n\n````\nnpm install --save shifty\n````\n\n````\nbower install --save shifty\n````\n\n## Browser compatibility\n\nShifty officially supports Internet Explorer 8 and up, as well as all Evergreen\nbrowsers.\n\n## Using Shifty\n\nShifty has no dependencies, so you can just load\n[shifty.min.js](dist/shifty.min.js) and start using it.  This file has all of\nthe extensions described above baked in.  If you only want the core `Number`\ntweening functionality ([shifty.core.js](src/shifty.core.js)), you can easily\nbuild that without any extensions (please see [Building\nShifty](#building-shifty)).\n\n## Getting started\n\nThis section explains how to get started with Shifty.  For full documentation\non each method, please see [the API\ndocumentation](http://jeremyckahn.github.io/shifty/dist/doc/classes/Tweenable.html).\n\n## Making a `tweenable()` instance\n\nThe first thing you need to do is create a `new` instance of `Tweenable`:\n\n````javascript\nvar tweenable = new Tweenable();\n````\n\nOptionally, you can also define the initial state of the `Tweenable` instance\nto the constructor via a configuration Object:\n\n````javascript\nvar tweenable = new Tweenable({\n  x: 50,\n  y: 100,\n  opacity: 0.5\n});\n````\n\nSupplying the initial state to the constructor would obviate the need to supply\na `from` value to the `tween` method.\n\n## tween\n\nMake a basic tween by specifying some options:\n\n  * from (Object): Starting position.  Required.\n  * to (Object): Ending position (signature must match `from`). Required.\n  * duration (number): How long to animate for.\n  * easing (string): Easing formula name to use for tween.\n  * start (function): Function to execute when the tween begins (after the\n    first tick).\n  * step (function): Function to execute every tick.\n  * finish (function): Function to execute upon completion.\n\n````javascript\nvar tweenable = new Tweenable();\n\ntweenable.tween({\n  from: { x: 0,  y: 50  },\n  to:   { x: 10, y: -30 },\n  duration: 1500,\n  easing: 'easeOutQuad',\n  start: function () { console.log('Off I go!'); },\n  finish: function () { console.log('And I\\'m done!'); }\n});\n````\n\n## Easing formulas\n\nShifty supports a number of easing formulas, which you can see in\n[`shifty.formulas.js`](src/shifty.formulas.js).  You can add new easing\nformulas by attaching methods to `Tweenable.prototype.formula`.\n\n## Advanced usage\n\nYou can control the state of a tween with the following methods:\n\n````javascript\nTweenable.prototype.stop();\nTweenable.prototype.pause();\nTweenable.prototype.resume();\n````\n\nYou can also examine and modify the state of a `Tweenable`:\n\n````javascript\nTweenable.prototype.get();\nTweenable.prototype.set();\n````\n\nThese, as well as all other methods, are detailed more in the [API\ndocumentation](http://jeremyckahn.github.io/shifty/dist/doc/classes/Tweenable.html).\n\n## Using multiple easing formulas\n\nShifty supports tweens that have different easing formulas for each property.\nHaving multiple easing formulas on a single tween can make for some really\ninteresting animations, because you aren't constrained to moving things in a\nstraight line.  You can make curves!  To do this, simply supply `easing` as an\nObject, rather than a string to `tween()`:\n\n````javascript\nvar tweenable = new Tweenable();\n\ntweenable.tween({\n  from: {\n    x: 0,\n    y: 0\n  },\n  to: {\n    x: 250,\n    y: 150\n  },\n  easing: {\n    x: 'swingFromTo',\n    y: 'bounce'\n  }\n});\n````\n\nThe Interpolate extension also supports both string and object parameter types\nfor `easing`.\n\n## Per-tween custom easing functions\n\nYou are not limited to attaching functions to `Tweenable.prototype.formula`.\nYou can also supply a custom easing curve directly to a `tween()` call:\n\n````javascript\nvar tweenable = new Tweenable();\nvar easingFunction = function (pos) {\n  // This sample function is the same as easeInQuad\n  return Math.pow(pos, 2);\n};\n\ntweenable.tween({\n  from: {\n    x: 0,\n    y: 0\n  },\n  to: {\n    x: 250,\n    y: 150\n  },\n  easing: easingFunction\n});\n````\n\nOr even an Object of mixed strings and functions:\n\n````javascript\ntweenable.tween({\n  from: {\n    x: 0,\n    y: 0\n  },\n  to: {\n    x: 250,\n    y: 150\n  },\n  easing: {\n    x: easingFunction,\n    y: 'linear'\n  }\n});\n````\n\n## Filters\n\nFilters are used for transforming the properties of a tween at various points\nin a `Tweenable` instance's life cycle.  Filters are meant to convert\nnon-`Number` data types to `Number`s so they can be tweened, and then back\nagain. Just define a filter once, attach it to `Tweenable.prototype`, and all\n`new` instances of `Tweenable` will have access to it.\n\nHere's an annotated example of a filter:\n\n````javascript\nTweenable.prototype.filter.doubler = {\n  // Gets called when a tween is created.\n  //\n  // `currentState` is the current state of the tweened object, `fromState` is\n  // the state that the tween started at, and `toState` contains the target\n  // values.\n  'tweenCreated': function tweenCreated (currentState, fromState, toState) {\n    Tweenable.each(obj, function (prop) {\n      // Nothing to do here, just showing that that is a valid filter to hook\n      // into.\n    });\n  },\n\n  // Gets called on every update before a tween state is calculated.\n  'beforeTween': function beforeTween (currentState, fromState, toState) {\n    Tweenable.each(toState, function (prop) {\n      // Double each target property right before the tween formula is applied.\n      obj[prop] *= 2;\n    });\n  },\n\n  // Gets called on every update after a tween state is calculated.\n  'afterTween': function afterTween (currentState, fromState, toState) {\n    Tweenable.each(toState, function (prop) {\n      // Return the target properties back to their pre-doubled values.\n      obj[prop] /= 2;\n    });\n  }\n}\n````\n\nYes, having `doubler` filter is useless.  A more practical use of filters is to\nadd support for more data types.  __Remember, Shifty only supports `Numbers`\nby default__, but you can add support for strings, functions, or whatever else\nyou might need.  For example, the Token extension works by filtering string\nvalues into numbers before each tween step, and then back again after the tween\nstep.\n\n## Building Shifty\n\nShifty uses [nodejs](http://nodejs.org) and [Grunt](http://gruntjs.com/) for\nthe build system. It also requires a handful of Node modules for the build\nprocess.  Install the dependencies via npm like so:\n\n````\n$: npm install\n````\n\nOnce those are installed, do this at the command line to build the project:\n\n````\n$: grunt build\n````\n\nThe the default `build` task creates a binary that includes all extensions.\nYou can also create minimal binaries that only include the bare essentials for\nShifty to run:\n\n````\n$: grunt build-minimal\n````\n\nNote that a minimal build includes no tweening formulas.  You can customize and\nadd build targets in the `grunt.js` file.  You can also lint the code and run\nthe unit tests with the default Grunt task:\n\n````\n$: grunt\n````\n\nTo generate the documentation:\n\n````\n$: grunt yuidoc\n````\n\n## AMD and NodeJS\n\nIf an AMD loader (eg. [RequireJS](http://requirejs.org/),\n[Curl.js](https://github.com/unscriptable/curl)) is present on the page, Shifty\nwon't generate any globals, so to use it you must list `\"shifty\"` as\na dependency.\n\n````javascript\ndefine(['shifty'], function(Tweenable){\n  var tweenable = new Tweenable();\n});\n````\n\nShifty can also be used in NodeJS:\n\n````javascript\nvar Tweenable = require('shifty');\n````\n\n## Contributors\n\nTake a peek at the [Network](https://github.com/jeremyckahn/shifty/network)\npage to see all of the Shifty contributors, but\n[@millermedeiros](https://github.com/millermedeiros) in particular deserves\nrecognition for his patches to make Shifty compatible with Node.\n\nAlso, special thanks goes to [Thomas Fuchs](https://twitter.com/thomasfuchs):\nShifty's easing formulas and Bezier curve code was adapted from his awesome\n[Scripty2](https://github.com/madrobby/scripty2) project.\n\n## License\n\nShifty is distributed under the [MIT\nlicense](http://opensource.org/licenses/MIT).  You are encouraged to use and\nmodify the code to suit your needs, as well as redistribute it.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jeremyckahn/shifty.git"
  },
  "scripts": {},
  "version": "1.5.4"
}
